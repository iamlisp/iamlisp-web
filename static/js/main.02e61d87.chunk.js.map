{"version":3,"sources":["components/Editor.js","components/console/InputPrefix.js","components/console/Log.js","components/console/Prompt.js","components/console/Console.js","config.js","App.js","utils/useWebSocket.js","serviceWorker.js","index.js"],"names":["require","EditorWrapper","styled","section","_templateObject","options","mode","theme","Editor","props","_useState","useState","_useState2","Object","slicedToArray","code","setCode","react_default","a","createElement","Codemirror_default","value","onChange","InputPrefix","LogEntry","div","Log_templateObject","LogWrapper","_templateObject2","Log","_ref","logEntries","map","entry","i","key","className","type","console_InputPrefix","content","PromptWrapper","Prompt_templateObject","Prompt","char","onSubmit","cursorPosition","setCursorPosition","inputBeforeCursor","slice","inputAtCursor","inputAfterCursor","putAtCursor","useCallback","beforeCursor","afterCursor","currentPosition","length","concat","handleKeyDown","event","Math","max","min","handleKeyPress","preventDefault","shiftKey","handlePaste","data","clipboardData","getData","tabIndex","onKeyDown","onKeyPress","onPaste","replace","ConsoleWrapper","Console_templateObject","Console","onEval","messageEmitter","endRef","createRef","input","setInput","_useState3","_useState4","setLogEntries","handleSubmit","newInputLogEntry","entries","toConsumableArray","useEffect","handleMessage","_ref2","parsedData","JSON","parse","newErrorLogEntry","error","newOutputLogEntry","result","on","off","current","scrollIntoView","console_Log","console_Prompt","ref","config","EVAL_ENDPOINT","process","Layout","App_templateObject","App","_useWebSocket","webSocketUrl","status","setStatus","socketRef","useRef","messageEmitterRef","socket","WebSocket","emitter","EventEmitter","onmessage","message","emit","onerror","onclose","onopen","close","sendMessage","msg","send","useWebSocket","_useWebSocket2","components_Editor","console_Console","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.02e61d87.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport CodeMirror from \"react-codemirror\";\r\nimport styled from \"styled-components\";\r\n\r\nrequire(\"codemirror/mode/commonlisp/commonlisp\");\r\n\r\nexport const EditorWrapper = styled.section`\r\n  font-family: \"Monaco\", monospace;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst options = {\r\n  mode: \"commonlisp\",\r\n  theme: \"material\"\r\n};\r\n\r\nconst Editor = props => {\r\n  const [code, setCode] = useState();\r\n  return (\r\n    <EditorWrapper>\r\n      <CodeMirror value={code} onChange={setCode} options={options} />\r\n    </EditorWrapper>\r\n  );\r\n};\r\n\r\nexport default Editor;\r\n","import React from \"react\";\r\n\r\nconst InputPrefix = () => <span>&gt;&nbsp;</span>;\r\n\r\nexport default InputPrefix;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport InputPrefix from \"./InputPrefix\";\r\n\r\nconst LogEntry = styled.div``;\r\n\r\nconst LogWrapper = styled.div`\r\n  ${LogEntry}.input {\r\n    color: #ffffff;\r\n  }\r\n\r\n  ${LogEntry}.output {\r\n    color: #00ff00;\r\n  }\r\n\r\n  ${LogEntry}.error {\r\n    color: #ff0000;\r\n  }\r\n`;\r\n\r\nconst Log = ({ logEntries }) => {\r\n  return (\r\n    <LogWrapper>\r\n      {logEntries.map((entry, i) => (\r\n        <LogEntry key={i} className={entry.type}>\r\n          {entry.type === \"input\" && <InputPrefix />}\r\n          {entry.content}\r\n        </LogEntry>\r\n      ))}\r\n    </LogWrapper>\r\n  );\r\n};\r\n\r\nexport default Log;\r\n","import React, { useState, useCallback } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport InputPrefix from \"./InputPrefix\";\r\n\r\nconst PromptWrapper = styled.div`\r\n  .cursor {\r\n    background-color: #eeeeee;\r\n    color: #223344;\r\n  }\r\n`;\r\n\r\nfunction sanitizeCharUnderCursor(char) {\r\n  if (!char) {\r\n    return \" \";\r\n  }\r\n  return char.replace(\"\\n\", \" \\n\");\r\n}\r\n\r\nconst Prompt = ({ value, onChange, onSubmit }) => {\r\n  const [cursorPosition, setCursorPosition] = useState(0);\r\n  const inputBeforeCursor = value.slice(0, cursorPosition);\r\n  const inputAtCursor = value[cursorPosition];\r\n  const inputAfterCursor = value.slice(cursorPosition + 1);\r\n\r\n  const putAtCursor = useCallback(\r\n    content => {\r\n      const beforeCursor = value.slice(0, cursorPosition);\r\n      const afterCursor = value.slice(cursorPosition);\r\n\r\n      setCursorPosition(currentPosition => currentPosition + content.length);\r\n      onChange(`${beforeCursor}${content}${afterCursor}`);\r\n    },\r\n    [cursorPosition, value, onChange]\r\n  );\r\n\r\n  const handleKeyDown = useCallback(\r\n    event => {\r\n      switch (event.key) {\r\n        case \"ArrowLeft\":\r\n          return setCursorPosition(currentPosition =>\r\n            Math.max(0, currentPosition - 1)\r\n          );\r\n\r\n        case \"ArrowRight\":\r\n          return setCursorPosition(currentPosition =>\r\n            Math.min(value.length, currentPosition + 1)\r\n          );\r\n\r\n        case \"End\":\r\n          return setCursorPosition(value.length);\r\n\r\n        case \"Home\":\r\n          return setCursorPosition(0);\r\n\r\n        case \"Backspace\": {\r\n          const beforeCursor = value.slice(0, cursorPosition);\r\n          const afterCursor = value.slice(cursorPosition);\r\n\r\n          setCursorPosition(currentPosition =>\r\n            Math.max(0, currentPosition - 1)\r\n          );\r\n          onChange(`${beforeCursor.slice(0, -1)}${afterCursor}`);\r\n\r\n          break;\r\n        }\r\n\r\n        case \"Delete\": {\r\n          const beforeCursor = value.slice(0, cursorPosition);\r\n          const afterCursor = value.slice(cursorPosition);\r\n\r\n          onChange(`${beforeCursor}${afterCursor.slice(1)}`);\r\n\r\n          break;\r\n        }\r\n\r\n        default:\r\n      }\r\n    },\r\n    [cursorPosition, value, onChange]\r\n  );\r\n\r\n  const handleKeyPress = useCallback(\r\n    event => {\r\n      event.preventDefault();\r\n\r\n      switch (event.key) {\r\n        case \"Enter\":\r\n          return event.shiftKey ? putAtCursor(\"\\n\") : onSubmit(value);\r\n\r\n        default:\r\n          return putAtCursor(event.key);\r\n      }\r\n    },\r\n    [putAtCursor, onSubmit, value]\r\n  );\r\n\r\n  const handlePaste = useCallback(\r\n    event => {\r\n      event.preventDefault();\r\n      const data = event.clipboardData.getData(\"Text\");\r\n      return putAtCursor(data);\r\n    },\r\n    [putAtCursor]\r\n  );\r\n\r\n  return (\r\n    <PromptWrapper\r\n      tabIndex={0}\r\n      onKeyDown={handleKeyDown}\r\n      onKeyPress={handleKeyPress}\r\n      onPaste={handlePaste}\r\n    >\r\n      <InputPrefix />\r\n      <span>{inputBeforeCursor}</span>\r\n      <span className=\"cursor\">{sanitizeCharUnderCursor(inputAtCursor)}</span>\r\n      <span>{inputAfterCursor}</span>\r\n    </PromptWrapper>\r\n  );\r\n};\r\n\r\nexport default Prompt;\r\n","import React, { useState, useCallback, useEffect, createRef } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Log from \"./Log\";\r\nimport Prompt from \"./Prompt\";\r\n\r\nexport const ConsoleWrapper = styled.section`\r\n  padding: 4px;\r\n  overflow-y: auto;\r\n  font-size: 12pt;\r\n  background-color: #000000;\r\n  color: #eeeeee;\r\n  font-family: \"Monaco\", monospace;\r\n  outline: none;\r\n  white-space: pre;\r\n`;\r\n\r\nconst Console = ({ onEval, messageEmitter }) => {\r\n  const endRef = createRef();\r\n\r\n  const [input, setInput] = useState(\"\");\r\n  const [logEntries, setLogEntries] = useState([]);\r\n\r\n  const handleSubmit = useCallback(() => {\r\n    const newInputLogEntry = { content: input, type: \"input\" };\r\n    setLogEntries(entries => [...entries, newInputLogEntry]);\r\n    setInput(\"\");\r\n    onEval(input);\r\n  }, [input, onEval]);\r\n\r\n  useEffect(() => {\r\n    const handleMessage = ({ data }) => {\r\n      const parsedData = JSON.parse(data);\r\n      if (\"error\" in parsedData) {\r\n        const newErrorLogEntry = { content: parsedData.error, type: \"error\" };\r\n        setLogEntries(entries => [...entries, newErrorLogEntry]);\r\n      }\r\n      if (\"result\" in parsedData) {\r\n        const newOutputLogEntry = {\r\n          content: parsedData.result,\r\n          type: \"output\"\r\n        };\r\n        setLogEntries(entries => [...entries, newOutputLogEntry]);\r\n      }\r\n    };\r\n\r\n    if (messageEmitter) {\r\n      messageEmitter.on(\"message\", handleMessage);\r\n      return () => {\r\n        messageEmitter.off(\"message\", handleMessage);\r\n      };\r\n    }\r\n  }, [messageEmitter]);\r\n\r\n  useEffect(() => {\r\n    endRef.current.scrollIntoView();\r\n  }, [endRef]);\r\n\r\n  return (\r\n    <ConsoleWrapper>\r\n      <Log logEntries={logEntries} />\r\n      <Prompt value={input} onChange={setInput} onSubmit={handleSubmit} />\r\n      <div ref={endRef} />\r\n    </ConsoleWrapper>\r\n  );\r\n};\r\n\r\nexport default Console;\r\n","const config = {\r\n  EVAL_ENDPOINT: process.env.REACT_APP_EVAL_ENDPOINT\r\n};\r\n\r\nexport default config;\r\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Editor, { EditorWrapper } from \"./components/Editor\";\nimport Console, { ConsoleWrapper } from \"./components/console/Console\";\nimport \"./App.css\";\nimport config from \"./config\";\nimport useWebSocket from \"./utils/useWebSocket\";\n\nconst Layout = styled.div`\n  display: flex;\n  width: 100vw;\n  height: 100vh;\n\n  ${EditorWrapper} {\n    width: 50%;\n  }\n\n  ${ConsoleWrapper} {\n    width: 50%;\n  }\n`;\n\nfunction App() {\n  const [status, messageEmitter, sendMessage] = useWebSocket(\n    config.EVAL_ENDPOINT\n  );\n\n  return (\n    <Layout>\n      <Editor />\n      {status === \"open\" && (\n        <Console onEval={sendMessage} messageEmitter={messageEmitter} />\n      )}\n    </Layout>\n  );\n}\n\nexport default App;\n","import { useRef, useEffect, useCallback, useState } from \"react\";\r\nimport { EventEmitter } from \"events\";\r\n\r\nexport default function useWebSocket(webSocketUrl) {\r\n  const [status, setStatus] = useState(\"closed\");\r\n\r\n  const socketRef = useRef();\r\n  const messageEmitterRef = useRef();\r\n\r\n  useEffect(() => {\r\n    const socket = new WebSocket(webSocketUrl);\r\n    const emitter = new EventEmitter();\r\n\r\n    socket.onmessage = message => emitter.emit(\"message\", message);\r\n    socket.onerror = error => setStatus(\"error\");\r\n    socket.onclose = () => setStatus(\"close\");\r\n    socket.onopen = () => setStatus(\"open\");\r\n\r\n    socketRef.current = socket;\r\n    messageEmitterRef.current = emitter;\r\n\r\n    return () => {\r\n      socketRef.current.onopen = null;\r\n      socketRef.current.onerror = null;\r\n      socketRef.current.onmessage = null;\r\n      socketRef.current.onclose = null;\r\n      socketRef.current.close();\r\n    };\r\n  }, [webSocketUrl]);\r\n\r\n  const sendMessage = useCallback(\r\n    msg => {\r\n      socketRef.current.send(msg);\r\n    },\r\n    [socketRef]\r\n  );\r\n\r\n  return [status, messageEmitterRef.current, sendMessage];\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}