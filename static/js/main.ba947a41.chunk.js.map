{"version":3,"sources":["components/FlatButton.js","components/editor/Panel.js","components/Editor.js","components/console/InputPrefix.js","components/console/Log.js","components/console/Prompt.js","components/console/hooks/useUniqueInputEntries.js","components/console/ConnectingMessage.js","components/console/Console.js","components/console/hooks/useLogEntries.js","components/console/hooks/useMessageHandler.js","config.js","App.js","utils/useWebSocket.js","serviceWorker.js","index.js"],"names":["FlatButton","styled","button","_templateObject","Panel","div","Panel_templateObject","PanelWrapper","_ref","onEvalClick","react_default","a","createElement","components_FlatButton","onClick","require","EditorWrapper","section","Editor_templateObject","options","mode","theme","lineNumbers","tabSize","indentWithTabs","matchBrackets","Editor","onEval","_useState","useState","_useState2","Object","slicedToArray","code","setCode","handleEvalClick","useCallback","handleChange","event","Codemirror_default","value","onChange","editor_Panel","InputPrefix","LogEntry","Log_templateObject","LogWrapper","_templateObject2","Log","logEntries","map","entry","i","key","className","type","console_InputPrefix","content","PromptWrapper","Prompt_templateObject","Prompt","char","onSubmit","promptRef","historyPosition","setHistoryPosition","_useState3","_useState4","cursorPosition","setCursorPosition","inputBeforeCursor","slice","inputAtCursor","inputAfterCursor","inputEntries","useMemo","filtered","filter","it","uniqBy","useUniqueInputEntries","putAtCursor","beforeCursor","afterCursor","currentPosition","length","concat","handleKeyDown","Math","max","min","newHistoryPosition","handleKeyPress","preventDefault","shiftKey","handlePaste","data","clipboardData","getData","ref","tabIndex","onKeyDown","onKeyPress","onPaste","replace","ConnectingText","ConnectingMessage_templateObject","ConnectingMessage","ConsoleWrapper","Console_templateObject","Console","connectionStatus","messageEmitter","endRef","createRef","input","setInput","initialState","setLogEntries","addError","error","newErrorLogEntry","entries","toConsumableArray","addOutput","output","newOutputLogEntry","addInput","newInputLogEntry","useLogEntries","useEffect","handleMessage","parsedData","JSON","parse","result","print","on","off","useMessageHandler","handleSubmit","handleOnFocus","current","focus","scrollIntoView","onFocus","console_Log","console_ConnectingMessage","console_Prompt","config","EVAL_ENDPOINT","process","Layout","App_templateObject","App","_useWebSocket","webSocketUrl","status","setStatus","socketRef","useRef","messageEmitterRef","socket","ReconnectingWebSocket","emitter","EventEmitter","onmessage","message","emit","onerror","onclose","onopen","close","sendMessage","msg","send","useWebSocket","_useWebSocket2","components_Editor","console_Console","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ba947a41.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nconst FlatButton = styled.button`\r\n  color: #fff;\r\n  background-color: #6496c8;\r\n  text-shadow: -1px 1px #417cb8;\r\n  border: none;\r\n  outline: none;\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    background-color: #346392;\r\n    text-shadow: -1px 1px #27496d;\r\n  }\r\n\r\n  &:active {\r\n    background-color: #27496d;\r\n    text-shadow: -1px 1px #193047;\r\n  }\r\n`;\r\n\r\nexport default FlatButton;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport FlatButton from \"../FlatButton\";\r\n\r\nconst Panel = styled.div`\r\n  padding: 4px;\r\n  background-color: #263238;\r\n  color: #eeeeee;\r\n  font-family: sans-serif;\r\n`;\r\n\r\nconst PanelWrapper = ({ onEvalClick }) => {\r\n  return (\r\n    <Panel>\r\n      <FlatButton onClick={onEvalClick}>Run</FlatButton>\r\n    </Panel>\r\n  );\r\n};\r\n\r\nexport default PanelWrapper;\r\n","import React, { useState, useCallback } from \"react\";\r\nimport CodeMirror from \"react-codemirror\";\r\nimport styled from \"styled-components\";\r\nimport PanelWrapper from \"./editor/Panel\";\r\n\r\nrequire(\"codemirror/mode/commonlisp/commonlisp\");\r\nrequire(\"codemirror/addon/edit/matchbrackets\");\r\n\r\nexport const EditorWrapper = styled.section`\r\n  font-family: \"Monaco\", monospace;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst options = {\r\n  mode: \"commonlisp\",\r\n  theme: \"material\",\r\n  lineNumbers: true,\r\n  tabSize: 2,\r\n  indentWithTabs: true,\r\n  matchBrackets: true\r\n};\r\n\r\nconst Editor = ({ onEval }) => {\r\n  const [code, setCode] = useState();\r\n\r\n  const handleEvalClick = useCallback(() => onEval(code), [code, onEval]);\r\n  const handleChange = useCallback((code, event) => setCode(code), []);\r\n\r\n  return (\r\n    <EditorWrapper>\r\n      <CodeMirror value={code} onChange={handleChange} options={options} />\r\n      <PanelWrapper onEvalClick={handleEvalClick} />\r\n    </EditorWrapper>\r\n  );\r\n};\r\n\r\nexport default Editor;\r\n","import React from \"react\";\r\n\r\nconst InputPrefix = () => <span>&gt;&nbsp;</span>;\r\n\r\nexport default InputPrefix;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport InputPrefix from \"./InputPrefix\";\r\n\r\nconst LogEntry = styled.div``;\r\n\r\nconst LogWrapper = styled.div`\r\n  ${LogEntry}.input {\r\n    color: #ffffff;\r\n  }\r\n\r\n  ${LogEntry}.output {\r\n    color: #00ff00;\r\n  }\r\n\r\n  ${LogEntry}.error {\r\n    color: #ff0000;\r\n  }\r\n`;\r\n\r\nconst Log = ({ logEntries }) => {\r\n  return (\r\n    <LogWrapper>\r\n      {logEntries.map((entry, i) => (\r\n        <LogEntry key={i} className={entry.type}>\r\n          {entry.type === \"input\" && <InputPrefix />}\r\n          {entry.content}\r\n        </LogEntry>\r\n      ))}\r\n    </LogWrapper>\r\n  );\r\n};\r\n\r\nexport default Log;\r\n","import React, { useState, useCallback } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport InputPrefix from \"./InputPrefix\";\r\nimport useUniqueInputEntries from \"./hooks/useUniqueInputEntries\";\r\n\r\nconst PromptWrapper = styled.div`\r\n  outline: none;\r\n\r\n  .cursor {\r\n    border: 1px solid #eeeeee\r\n    color: #223344;\r\n  }\r\n\r\n  &:focus .cursor {\r\n    background-color: #eeeeee;\r\n  }\r\n`;\r\n\r\nfunction sanitizeCharUnderCursor(char) {\r\n  if (!char) {\r\n    return \" \";\r\n  }\r\n  return char.replace(\"\\n\", \" \\n\");\r\n}\r\n\r\nconst Prompt = ({ value, onChange, onSubmit, logEntries, promptRef }) => {\r\n  const [historyPosition, setHistoryPosition] = useState(null);\r\n  const [cursorPosition, setCursorPosition] = useState(0);\r\n  const inputBeforeCursor = value.slice(0, cursorPosition);\r\n  const inputAtCursor = value[cursorPosition];\r\n  const inputAfterCursor = value.slice(cursorPosition + 1);\r\n\r\n  const inputEntries = useUniqueInputEntries(logEntries);\r\n\r\n  const putAtCursor = useCallback(\r\n    content => {\r\n      const beforeCursor = value.slice(0, cursorPosition);\r\n      const afterCursor = value.slice(cursorPosition);\r\n\r\n      setCursorPosition(currentPosition => currentPosition + content.length);\r\n      onChange(`${beforeCursor}${content}${afterCursor}`);\r\n    },\r\n    [cursorPosition, value, onChange]\r\n  );\r\n\r\n  const handleKeyDown = useCallback(\r\n    event => {\r\n      switch (event.key) {\r\n        case \"ArrowLeft\":\r\n          return setCursorPosition(currentPosition =>\r\n            Math.max(0, currentPosition - 1)\r\n          );\r\n\r\n        case \"ArrowRight\":\r\n          return setCursorPosition(currentPosition =>\r\n            Math.min(value.length, currentPosition + 1)\r\n          );\r\n\r\n        case \"ArrowUp\": {\r\n          const newHistoryPosition =\r\n            historyPosition === null\r\n              ? inputEntries.length - 1\r\n              : Math.max(historyPosition - 1, 0);\r\n          setHistoryPosition(newHistoryPosition);\r\n          onChange(inputEntries[newHistoryPosition].content);\r\n          break;\r\n        }\r\n\r\n        case \"ArrowDown\": {\r\n          if (historyPosition !== null) {\r\n            const newHistoryPosition = Math.min(\r\n              historyPosition + 1,\r\n              inputEntries.length - 1\r\n            );\r\n            setHistoryPosition(newHistoryPosition);\r\n            onChange(inputEntries[newHistoryPosition].content);\r\n          }\r\n          break;\r\n        }\r\n\r\n        case \"End\":\r\n          return setCursorPosition(value.length);\r\n\r\n        case \"Home\":\r\n          return setCursorPosition(0);\r\n\r\n        case \"Backspace\": {\r\n          const beforeCursor = value.slice(0, cursorPosition);\r\n          const afterCursor = value.slice(cursorPosition);\r\n\r\n          setCursorPosition(currentPosition =>\r\n            Math.max(0, currentPosition - 1)\r\n          );\r\n          onChange(`${beforeCursor.slice(0, -1)}${afterCursor}`);\r\n\r\n          break;\r\n        }\r\n\r\n        case \"Delete\": {\r\n          const beforeCursor = value.slice(0, cursorPosition);\r\n          const afterCursor = value.slice(cursorPosition);\r\n\r\n          onChange(`${beforeCursor}${afterCursor.slice(1)}`);\r\n\r\n          break;\r\n        }\r\n\r\n        default:\r\n      }\r\n    },\r\n    [cursorPosition, historyPosition, inputEntries, value, onChange]\r\n  );\r\n\r\n  const handleKeyPress = useCallback(\r\n    event => {\r\n      event.preventDefault();\r\n\r\n      switch (event.key) {\r\n        case \"Enter\":\r\n          if (event.shiftKey) {\r\n            return putAtCursor(\"\\n\");\r\n          } else {\r\n            setHistoryPosition(null);\r\n            return onSubmit(value);\r\n          }\r\n\r\n        default:\r\n          return putAtCursor(event.key);\r\n      }\r\n    },\r\n    [putAtCursor, onSubmit, value]\r\n  );\r\n\r\n  const handlePaste = useCallback(\r\n    event => {\r\n      event.preventDefault();\r\n      const data = event.clipboardData.getData(\"Text\");\r\n      return putAtCursor(data);\r\n    },\r\n    [putAtCursor]\r\n  );\r\n\r\n  return (\r\n    <PromptWrapper\r\n      ref={promptRef}\r\n      tabIndex={0}\r\n      onKeyDown={handleKeyDown}\r\n      onKeyPress={handleKeyPress}\r\n      onPaste={handlePaste}\r\n    >\r\n      <InputPrefix />\r\n      <span>{inputBeforeCursor}</span>\r\n      <span className=\"cursor\">{sanitizeCharUnderCursor(inputAtCursor)}</span>\r\n      <span>{inputAfterCursor}</span>\r\n    </PromptWrapper>\r\n  );\r\n};\r\n\r\nexport default Prompt;\r\n","import { useMemo } from \"react\";\r\nimport uniqBy from \"lodash.uniqby\";\r\n\r\nexport default function useUniqueInputEntries(logEntries) {\r\n  const inputEntries = useMemo(() => {\r\n    const filtered = logEntries.filter(\r\n      it => it.type === \"input\" && it.content !== \"\"\r\n    );\r\n    return uniqBy(filtered, ({ content }) => content);\r\n  }, [logEntries]);\r\n\r\n  return inputEntries;\r\n}\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst ConnectingText = styled.div`\r\n  color: #888888;\r\n`;\r\n\r\nconst ConnectingMessage = () => {\r\n  return <ConnectingText>(Re)connecting...</ConnectingText>;\r\n};\r\n\r\nexport default ConnectingMessage;\r\n","import React, { useState, useCallback, useEffect, createRef } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Log from \"./Log\";\r\nimport Prompt from \"./Prompt\";\r\nimport useLogEntries from \"./hooks/useLogEntries\";\r\nimport useMessageHandler from \"./hooks/useMessageHandler\";\r\nimport ConnectingMessage from \"./ConnectingMessage\";\r\n\r\nexport const ConsoleWrapper = styled.section`\r\n  padding: 4px;\r\n  overflow-y: auto;\r\n  font-size: 12pt;\r\n  background-color: #000000;\r\n  color: #eeeeee;\r\n  font-family: \"Monaco\", monospace;\r\n  outline: none;\r\n  white-space: pre;\r\n`;\r\n\r\nconst Console = ({ connectionStatus, onEval, messageEmitter }) => {\r\n  const endRef = createRef();\r\n  const promptRef = createRef();\r\n\r\n  const [input, setInput] = useState(\"\");\r\n  const logEntries = useLogEntries([]);\r\n\r\n  useMessageHandler(messageEmitter, logEntries);\r\n\r\n  const handleSubmit = useCallback(() => {\r\n    if (connectionStatus === \"open\") {\r\n      logEntries.addInput(input);\r\n      setInput(\"\");\r\n      onEval(input);\r\n    }\r\n  }, [input, onEval, logEntries, connectionStatus]);\r\n\r\n  const handleOnFocus = useCallback(() => {\r\n    promptRef.current.focus();\r\n  }, [promptRef]);\r\n\r\n  useEffect(() => endRef.current.scrollIntoView(), [endRef]);\r\n\r\n  return (\r\n    <ConsoleWrapper onFocus={handleOnFocus} tabIndex={0}>\r\n      <Log logEntries={logEntries.entries} />\r\n      {connectionStatus !== \"open\" && <ConnectingMessage />}\r\n      <Prompt\r\n        logEntries={logEntries.entries}\r\n        value={input}\r\n        onChange={setInput}\r\n        onSubmit={handleSubmit}\r\n        promptRef={promptRef}\r\n      />\r\n      <div ref={endRef} />\r\n    </ConsoleWrapper>\r\n  );\r\n};\r\n\r\nexport default Console;\r\n","import { useState } from \"react\";\r\n\r\nexport default function useLogEntries(initialState) {\r\n  const [logEntries, setLogEntries] = useState(initialState);\r\n\r\n  return {\r\n    addError(error) {\r\n      const newErrorLogEntry = { content: error, type: \"error\" };\r\n      setLogEntries(entries => [...entries, newErrorLogEntry]);\r\n    },\r\n    addOutput(output) {\r\n      const newOutputLogEntry = { content: output, type: \"output\" };\r\n      setLogEntries(entries => [...entries, newOutputLogEntry]);\r\n    },\r\n    addInput(input) {\r\n      const newInputLogEntry = { content: input, type: \"input\" };\r\n      setLogEntries(entries => [...entries, newInputLogEntry]);\r\n    },\r\n    entries: logEntries\r\n  };\r\n}\r\n","import { useEffect } from \"react\";\r\n\r\nexport default function useMessageHandler(messageEmitter, logEntries) {\r\n  useEffect(() => {\r\n    const handleMessage = ({ data }) => {\r\n      const parsedData = JSON.parse(data);\r\n\r\n      if (\"error\" in parsedData) {\r\n        logEntries.addError(parsedData.error);\r\n      } else if (\"result\" in parsedData) {\r\n        logEntries.addOutput(parsedData.result);\r\n      } else if (\"print\" in parsedData) {\r\n        logEntries.addOutput(parsedData.print);\r\n      } else {\r\n        logEntries.addOutput(\"OK\");\r\n      }\r\n    };\r\n\r\n    if (messageEmitter) {\r\n      messageEmitter.on(\"message\", handleMessage);\r\n      return () => {\r\n        messageEmitter.off(\"message\", handleMessage);\r\n      };\r\n    }\r\n\r\n    return () => {};\r\n  }, [messageEmitter, logEntries]);\r\n}\r\n","const config = {\r\n  EVAL_ENDPOINT: process.env.REACT_APP_EVAL_ENDPOINT\r\n};\r\n\r\nexport default config;\r\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Editor, { EditorWrapper } from \"./components/Editor\";\nimport Console, { ConsoleWrapper } from \"./components/console/Console\";\nimport \"./App.css\";\nimport config from \"./config\";\nimport useWebSocket from \"./utils/useWebSocket\";\n\nconst Layout = styled.div`\n  display: flex;\n  width: 100vw;\n  height: 100vh;\n\n  ${EditorWrapper} {\n    width: 50%;\n  }\n\n  ${ConsoleWrapper} {\n    width: 50%;\n  }\n`;\n\nfunction App() {\n  const [status, messageEmitter, sendMessage] = useWebSocket(\n    config.EVAL_ENDPOINT\n  );\n\n  return (\n    <Layout>\n      <Editor onEval={sendMessage} />\n      <Console\n        connectionStatus={status}\n        onEval={sendMessage}\n        messageEmitter={messageEmitter}\n      />\n    </Layout>\n  );\n}\n\nexport default App;\n","import { useRef, useEffect, useCallback, useState } from \"react\";\r\nimport { EventEmitter } from \"events\";\r\nimport ReconnectingWebSocket from \"reconnecting-websocket\";\r\n\r\nexport default function useWebSocket(webSocketUrl) {\r\n  const [status, setStatus] = useState(\"closed\");\r\n\r\n  const socketRef = useRef();\r\n  const messageEmitterRef = useRef();\r\n\r\n  useEffect(() => {\r\n    const socket = new ReconnectingWebSocket(webSocketUrl);\r\n    const emitter = new EventEmitter();\r\n\r\n    socket.onmessage = message => emitter.emit(\"message\", message);\r\n    socket.onerror = error => setStatus(\"error\");\r\n    socket.onclose = () => setStatus(\"close\");\r\n    socket.onopen = () => setStatus(\"open\");\r\n\r\n    socketRef.current = socket;\r\n    messageEmitterRef.current = emitter;\r\n\r\n    return () => {\r\n      socketRef.current.onopen = null;\r\n      socketRef.current.onerror = null;\r\n      socketRef.current.onmessage = null;\r\n      socketRef.current.onclose = null;\r\n      socketRef.current.close();\r\n    };\r\n  }, [webSocketUrl]);\r\n\r\n  const sendMessage = useCallback(\r\n    msg => {\r\n      socketRef.current.send(msg);\r\n    },\r\n    [socketRef]\r\n  );\r\n\r\n  return [status, messageEmitterRef.current, sendMessage];\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}